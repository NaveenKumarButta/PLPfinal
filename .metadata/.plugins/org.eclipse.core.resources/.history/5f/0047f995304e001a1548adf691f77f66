package com.capgemini.storesmanagementsystem.controller;

import java.util.List;
import java.util.Scanner;

import org.apache.log4j.Logger;

import com.capgemini.storesmanagementsystem.dao.ManufacturerDaoImpl;
import com.capgemini.storesmanagementsystem.dto.ProductDetailsInfo;
import com.capgemini.storesmanagementsystem.dto.UserDetailsInfo;
import com.capgemini.storesmanagementsystem.service.ManufacturerService;
import com.capgemini.storesmanagementsystem.service.ManufacturerServiceImpl;
import com.capgemini.storesmanagementsystem.validation.Validation;

public class ManufacturerController {
	ManufacturerService manService = new ManufacturerServiceImpl();

	Logger log = Logger.getLogger("store");
	Scanner scan = new Scanner(System.in);
	ManufacturerDaoImpl dao = new ManufacturerDaoImpl();
	Validation validate = new Validation();

	void manufactureTask() {

		int choice = 0;
		log.info("Welcome to Manufactures Page");
		log.info("1.Add Dealer");
		log.info("2.Modify Dealer");
		log.info("3.Remove Dealers");
		log.info("4.View Dealers");
		log.info("5.Add Products");
		log.info("6.Modify Products");
		log.info("7.Remove Products");
		log.info("8.View Products");
		log.info("9.View Store");
		log.info("10.Exit");

		do {
			log.info("************************");
			log.info("Enter Your Choice");
			log.info("************************");
			scan = validate.integerValidation();
			choice = scan.nextInt();
			switch (choice) {
			case 1:
				UserDetailsInfo user = new UserDetailsInfo();
				while (true) {
					log.info("Enter the UserId");
					String userId = scan.next();
					boolean res1 = validate.idValidation(userId);
					if (res1) {
						user.setUserId(userId);
						break;
					} else {
						log.info("Invalid !! Try Again");
					}
				}
				while (true) {
					log.info("Enter the Email(It Should contain Capital Letters" + "Special Characters,Digits)");
					String Email = scan.next();
					boolean res2 = validate.validateEmail(Email);
					if (res2) {
						user.setEmail(Email);
						break;
					} else {
						log.info("Invalid !! Try Again");
					}
				}
				while (true) {
					log.info("Enter the Location(Give it in Alphabets)");
					String Location = scan.next();
					boolean res3 = validate.userNameValidation(Location);
					if (res3) {
						user.setAddress(Location);
						break;
					} else {
						log.info("Invalid !! Try Again");
					}
				}
				while (true) {
					log.info(
							"Enter the Password(Minimum 8 characters" + "Atleast 1 Capital Letter,1 Special Character");
					String password = scan.next();
					boolean res4 = validate.validatePassword(password);
					if (res4) {
						user.setPassword(password);
						break;
					} else {
						log.info("Invalid !! Try Again");
					}
				}
				while (true) {
					log.info("Enter the Role");
					String role = scan.next();
					boolean res5 = validate.userNameValidation(role);
					if (res5) {
						user.setUserRole(role);
						break;
					} else
						log.info("Invalid !! Try Again");
				}
				while (true) {
					log.info("Enter the UserName");
					String uname = scan.next();
					boolean res6 = validate.userNameValidation(uname);
					if (res6) {
						user.setUserName(uname);
						break;
					} else
						log.info("Invalid !! Try Again");
				}
				boolean result = manService.addDealer(user);
				if (result)
					log.info("Insert Succesfully");
				else
					log.info("Insertion Failed");
				break;
			case 2:
				UserDetailsInfo user1 = new UserDetailsInfo();

				log.info("Enter the User_ID You want to Update");
				scan = validate.integerValidation();
				String id = scan.next();
				while (true) {
					log.info("Enter the Username");
					String name = scan.next();
					boolean re = validate.userNameValidation(name);
					if (re) {
						user1.setUserName(name);
						break;
					} else
						log.info("Invalid !! Try Again");
				}
				while (true) {
					log.info("Enter the Password");
					String pass = scan.next();
					boolean re = validate.validatePassword(pass);
					if (re) {
						user1.setPassword(pass);
						break;
					} else {
						log.info("Invalid !! Try Again");
					}
				}
				while (true) {
					log.info("Enter the email");
					String emailid = scan.next();
					boolean r = validate.validateEmail(emailid);
					if (r) {
						user1.setEmail(emailid);
						break;
					} else
						log.info("Invalid !! Try Again");
				}
				boolean result1 = manService.modifyDealer(id, user1);
				if (result1)

					log.info("Record has been updated Successfully!!!");
				else
					log.info("Updation Failed");
				break;

			case 3:
				boolean res1;
				while (true) {
					log.info("Enter the UserId(String) You want to Delete");
					String userid = scan.next();
					boolean res = validate.idValidation(userid);
					if (res) {
						res1 = manService.removeDealer(userid);
						break;
					} else {
						log.info("Invalid !! Try Again");
					}
				}
				if (res1)
					log.info("UserId is deleted Succesfully");
				else
					log.info("UserId  Not Found");
				break;

			case 4:
				while (true) {
					log.info("Enter which role(Users) you want to see");
					String rol = scan.next();
					boolean result2 = validate.userNameValidation(rol);
					if (result2) {
						List<String> li = dao.viewAllDealers(rol);
						log.info(li);
						break;
					} else
						log.info("Invalid !! Try Again");
				}
				break;
			case 5:
				ProductDetailsInfo product = new ProductDetailsInfo();
				log.info("Enter the ProductId");
				scan = validate.integerValidation();
				int pId = scan.nextInt();
				product.setProduct(pId);
				while (true) {
					log.info("Enter the Brand");
					String brand = scan.next();
					boolean b = validate.userNameValidation(brand);
					if (b) {
						product.setProductName(brand);
						break;
					} else
						log.info("Invalid !! Try Again");
				}
				log.info("Enter the Price");
				double d = scan.nextDouble();
				product.setPrice(d);

				log.info("Enter the Stocks");
				scan = validate.integerValidation();
				int s = scan.nextInt();
				product.setStocks(s);
				while (true) {
					log.info("Enter the Warranty");
					String str = scan.next();
					boolean g = validate.userNameValidation(str);
					if (g) {
						product.setWarranty(str);
						break;
					} else
						log.info("Invalid !! Try Again");
				}

				boolean result2 = manService.addProduct(product);
				if (result2)
					log.info("Insert Succesfully");
				else
					log.info("Insertion Failed");
				break;

			case 6:

				ProductDetailsInfo prod = new ProductDetailsInfo();
				log.info("Enter the ProductID You want to Update");
				scan = validate.integerValidation();
				int pid = scan.nextInt();

				log.info("Enter the price");
				double price = scan.nextDouble();
				prod.setPrice(price);
				while (true) {
					log.info("Enter the Warranty");
					String warranty = scan.next();
					boolean f = validate.userNameValidation(warranty);
					if (f) {

						prod.setWarranty(warranty);
						break;
					} else
						log.info("Invalid !! Try Again");
				}
				boolean result3 = manService.modifyProduct(pid, prod);
				if (result3)
					log.info("Record has been updated Successfully!!!");
				else
					log.info("Updation Failed");

				break;

			case 7:

				log.info("Enter the ProductId You want to Delete");
				scan = validate.integerValidation();
				int pid1 = scan.nextInt();
				boolean result4 = manService.removeProduct(pid1);
				if (result4)
					log.info("UserId is deleted Succesfully");
				else
					log.info("UserID Not Found");
				break;

			case 8:
				List<String> n = manService.viewAllProducts();

				log.info(n);

				break;
			case 9:
				List<String> ki = manService.viewStore();

				log.info(ki);

				break;
			default:
				System.out.println("Invalid Choice...");
				break;

			}
		} while (choice != 10);
	}}